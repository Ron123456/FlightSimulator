  ConnectCommand.cpp
c:\users\ron\appdata\local\temp\rar$dra6380.13983\flightsimulator-master\visproject2\mitkadem3\connectcommand.cpp(5): fatal error C1083: Cannot open include file: 'ConnectCommand.h': No such file or directory
  Compiler.cpp
c:\users\ron\source\repos\mitkadem3\mitkadem3\command.h(12): error C2061: syntax error: identifier 'Compiler'
c:\users\ron\source\repos\mitkadem3\mitkadem3\compiler.cpp(3): error C2084: function 'Compiler::Compiler(void)' already has a body
  c:\users\ron\source\repos\mitkadem3\mitkadem3\compiler.h(24): note: see previous definition of '{ctor}'
c:\users\ron\source\repos\mitkadem3\mitkadem3\compiler.cpp(11): warning C4018: '<': signed/unsigned mismatch
c:\users\ron\source\repos\mitkadem3\mitkadem3\compiler.cpp(26): warning C4018: '<': signed/unsigned mismatch
  mitkadem3.cpp
c:\users\ron\source\repos\mitkadem3\mitkadem3\command.h(12): error C2061: syntax error: identifier 'Compiler'
  openServerCommand.cpp
c:\users\ron\source\repos\mitkadem3\mitkadem3\command.h(12): error C2061: syntax error: identifier 'Compiler'
c:\users\ron\source\repos\mitkadem3\mitkadem3\command.h(8): error C2011: 'Command': 'class' type redefinition
  c:\users\ron\source\repos\mitkadem3\mitkadem3\command.h(8): note: see declaration of 'Command'
c:\users\ron\source\repos\mitkadem3\mitkadem3\openservercommand.h(4): error C2504: 'Command': base class undefined
c:\users\ron\source\repos\mitkadem3\mitkadem3\openservercommand.h(7): error C3668: 'openServerCommand::execute': method with override specifier 'override' did not override any base class methods
c:\users\ron\source\repos\mitkadem3\mitkadem3\openservercommand.cpp(2): fatal error C1083: Cannot open include file: 'sys/socket.h': No such file or directory
  SymbolTable.cpp
d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\tuple(1305): error C2512: 'Var::Var': no appropriate default constructor available
  d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\tuple(1318): note: see reference to function template instantiation 'std::pair<const _Kty,_Ty>::pair<std::tuple<const std::basic_string<char,std::char_traits<char>,std::allocator<char>> &>,std::tuple<>,0,>(_Tuple1 &,_Tuple2 &,std::integer_sequence<unsigned int,0>,std::integer_sequence<size_t>)' being compiled
          with
          [
              _Kty=std::string,
              _Ty=Var,
              _Tuple1=std::tuple<const std::basic_string<char,std::char_traits<char>,std::allocator<char>> &>,
              _Tuple2=std::tuple<>
          ]
  d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\tuple(1318): note: see reference to function template instantiation 'std::pair<const _Kty,_Ty>::pair<std::tuple<const std::basic_string<char,std::char_traits<char>,std::allocator<char>> &>,std::tuple<>,0,>(_Tuple1 &,_Tuple2 &,std::integer_sequence<unsigned int,0>,std::integer_sequence<size_t>)' being compiled
          with
          [
              _Kty=std::string,
              _Ty=Var,
              _Tuple1=std::tuple<const std::basic_string<char,std::char_traits<char>,std::allocator<char>> &>,
              _Tuple2=std::tuple<>
          ]
  d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0(879): note: see reference to function template instantiation 'std::pair<const _Kty,_Ty>::pair<const std::basic_string<char,std::char_traits<char>,std::allocator<char>>&,>(std::piecewise_construct_t,std::tuple<const std::basic_string<char,std::char_traits<char>,std::allocator<char>> &>,std::tuple<>)' being compiled
          with
          [
              _Kty=std::string,
              _Ty=Var
          ]
  d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0(881): note: see reference to function template instantiation 'std::pair<const _Kty,_Ty>::pair<const std::basic_string<char,std::char_traits<char>,std::allocator<char>>&,>(std::piecewise_construct_t,std::tuple<const std::basic_string<char,std::char_traits<char>,std::allocator<char>> &>,std::tuple<>)' being compiled
          with
          [
              _Kty=std::string,
              _Ty=Var
          ]
  d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\list(711): note: see reference to function template instantiation 'void std::_Default_allocator_traits<_Alloc>::construct<_Ty,const std::piecewise_construct_t&,std::tuple<const std::basic_string<char,std::char_traits<char>,std::allocator<char>> &>,std::tuple<>>(_Alloc &,_Objty *const ,const std::piecewise_construct_t &,std::tuple<const std::basic_string<char,std::char_traits<char>,std::allocator<char>> &> &&,std::tuple<> &&)' being compiled
          with
          [
              _Alloc=std::allocator<std::_List_node<std::pair<const std::string,Var>,std::_Default_allocator_traits<std::allocator<std::pair<const std::string,Var>>>::void_pointer>>,
              _Ty=std::pair<const std::string,Var>,
              _Objty=std::pair<const std::string,Var>
          ]
  d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\list(716): note: see reference to function template instantiation 'void std::_Default_allocator_traits<_Alloc>::construct<_Ty,const std::piecewise_construct_t&,std::tuple<const std::basic_string<char,std::char_traits<char>,std::allocator<char>> &>,std::tuple<>>(_Alloc &,_Objty *const ,const std::piecewise_construct_t &,std::tuple<const std::basic_string<char,std::char_traits<char>,std::allocator<char>> &> &&,std::tuple<> &&)' being compiled
          with
          [
              _Alloc=std::allocator<std::_List_node<std::pair<const std::string,Var>,std::_Default_allocator_traits<std::allocator<std::pair<const std::string,Var>>>::void_pointer>>,
              _Ty=std::pair<const std::string,Var>,
              _Objty=std::pair<const std::string,Var>
          ]
  d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\list(947): note: see reference to function template instantiation 'std::_List_node<_Ty,std::_Default_allocator_traits<_Alloc>::void_pointer> *std::_List_buy<_Ty,_Alloc>::_Buynode<const std::piecewise_construct_t&,std::tuple<const std::basic_string<char,std::char_traits<char>,std::allocator<char>> &>,std::tuple<>>(std::_List_node<_Ty,std::_Default_allocator_traits<_Alloc>::void_pointer> *,std::_List_node<_Ty,std::_Default_allocator_traits<_Alloc>::void_pointer> *,const std::piecewise_construct_t &,std::tuple<const std::basic_string<char,std::char_traits<char>,std::allocator<char>> &> &&,std::tuple<> &&)' being compiled
          with
          [
              _Ty=std::pair<const std::string,Var>,
              _Alloc=std::allocator<std::pair<const std::string,Var>>
          ]
  d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\list(950): note: see reference to function template instantiation 'std::_List_node<_Ty,std::_Default_allocator_traits<_Alloc>::void_pointer> *std::_List_buy<_Ty,_Alloc>::_Buynode<const std::piecewise_construct_t&,std::tuple<const std::basic_string<char,std::char_traits<char>,std::allocator<char>> &>,std::tuple<>>(std::_List_node<_Ty,std::_Default_allocator_traits<_Alloc>::void_pointer> *,std::_List_node<_Ty,std::_Default_allocator_traits<_Alloc>::void_pointer> *,const std::piecewise_construct_t &,std::tuple<const std::basic_string<char,std::char_traits<char>,std::allocator<char>> &> &&,std::tuple<> &&)' being compiled
          with
          [
              _Ty=std::pair<const std::string,Var>,
              _Alloc=std::allocator<std::pair<const std::string,Var>>
          ]
  d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\list(916): note: see reference to function template instantiation 'void std::list<std::pair<const _Kty,_Ty>,std::allocator<std::pair<const _Kty,_Ty>>>::_Insert<const std::piecewise_construct_t&,std::tuple<const std::basic_string<char,std::char_traits<char>,std::allocator<char>> &>,std::tuple<>>(std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const _Kty,_Ty>>>,std::_Iterator_base0>,const std::piecewise_construct_t &,std::tuple<const std::basic_string<char,std::char_traits<char>,std::allocator<char>> &> &&,std::tuple<> &&)' being compiled
          with
          [
              _Kty=std::string,
              _Ty=Var
          ]
  d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\list(917): note: see reference to function template instantiation 'void std::list<std::pair<const _Kty,_Ty>,std::allocator<std::pair<const _Kty,_Ty>>>::_Insert<const std::piecewise_construct_t&,std::tuple<const std::basic_string<char,std::char_traits<char>,std::allocator<char>> &>,std::tuple<>>(std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const _Kty,_Ty>>>,std::_Iterator_base0>,const std::piecewise_construct_t &,std::tuple<const std::basic_string<char,std::char_traits<char>,std::allocator<char>> &> &&,std::tuple<> &&)' being compiled
          with
          [
              _Kty=std::string,
              _Ty=Var
          ]
  d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xhash(299): note: see reference to function template instantiation 'void std::list<std::pair<const _Kty,_Ty>,std::allocator<std::pair<const _Kty,_Ty>>>::emplace_front<const std::piecewise_construct_t&,std::tuple<const std::basic_string<char,std::char_traits<char>,std::allocator<char>> &>,std::tuple<>>(const std::piecewise_construct_t &,std::tuple<const std::basic_string<char,std::char_traits<char>,std::allocator<char>> &> &&,std::tuple<> &&)' being compiled
          with
          [
              _Kty=std::string,
              _Ty=Var
          ]
  d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\unordered_map(318): note: see reference to function template instantiation 'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<_Ty>>>,bool> std::_Hash<std::_Umap_traits<_Kty,Var,std::_Uhash_compare<_Kty,_Hasher,_Keyeq>,_Alloc,false>>::emplace<const std::piecewise_construct_t&,std::tuple<const std::basic_string<char,std::char_traits<char>,std::allocator<char>> &>,std::tuple<>>(const std::piecewise_construct_t &,std::tuple<const std::basic_string<char,std::char_traits<char>,std::allocator<char>> &> &&,std::tuple<> &&)' being compiled
          with
          [
              _Ty=std::pair<const std::string,Var>,
              _Kty=std::string,
              _Hasher=std::hash<std::string>,
              _Keyeq=std::equal_to<std::string>,
              _Alloc=std::allocator<std::pair<const std::string,Var>>
          ]
  d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\unordered_map(321): note: see reference to function template instantiation 'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<_Ty>>>,bool> std::_Hash<std::_Umap_traits<_Kty,Var,std::_Uhash_compare<_Kty,_Hasher,_Keyeq>,_Alloc,false>>::emplace<const std::piecewise_construct_t&,std::tuple<const std::basic_string<char,std::char_traits<char>,std::allocator<char>> &>,std::tuple<>>(const std::piecewise_construct_t &,std::tuple<const std::basic_string<char,std::char_traits<char>,std::allocator<char>> &> &&,std::tuple<> &&)' being compiled
          with
          [
              _Ty=std::pair<const std::string,Var>,
              _Kty=std::string,
              _Hasher=std::hash<std::string>,
              _Keyeq=std::equal_to<std::string>,
              _Alloc=std::allocator<std::pair<const std::string,Var>>
          ]
  d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\unordered_map(332): note: see reference to function template instantiation 'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<_Ty>>>,bool> std::unordered_map<std::string,Var,std::hash<_Kty>,std::equal_to<_Kty>,std::allocator<_Ty>>::_Try_emplace<const std::basic_string<char,std::char_traits<char>,std::allocator<char>>&,>(_Keyty)' being compiled
          with
          [
              _Ty=std::pair<const std::string,Var>,
              _Kty=std::string,
              _Keyty=const std::basic_string<char,std::char_traits<char>,std::allocator<char>> &
          ]
  d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\unordered_map(333): note: see reference to function template instantiation 'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<_Ty>>>,bool> std::unordered_map<std::string,Var,std::hash<_Kty>,std::equal_to<_Kty>,std::allocator<_Ty>>::_Try_emplace<const std::basic_string<char,std::char_traits<char>,std::allocator<char>>&,>(_Keyty)' being compiled
          with
          [
              _Ty=std::pair<const std::string,Var>,
              _Kty=std::string,
              _Keyty=const std::basic_string<char,std::char_traits<char>,std::allocator<char>> &
          ]
  d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\unordered_map(490): note: see reference to function template instantiation 'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<_Ty>>>,bool> std::unordered_map<std::string,Var,std::hash<_Kty>,std::equal_to<_Kty>,std::allocator<_Ty>>::try_emplace<>(const std::basic_string<char,std::char_traits<char>,std::allocator<char>> &)' being compiled
          with
          [
              _Ty=std::pair<const std::string,Var>,
              _Kty=std::string
          ]
  d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\unordered_map(490): note: see reference to function template instantiation 'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<_Ty>>>,bool> std::unordered_map<std::string,Var,std::hash<_Kty>,std::equal_to<_Kty>,std::allocator<_Ty>>::try_emplace<>(const std::basic_string<char,std::char_traits<char>,std::allocator<char>> &)' being compiled
          with
          [
              _Ty=std::pair<const std::string,Var>,
              _Kty=std::string
          ]
  d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\unordered_map(489): note: while compiling class template member function 'Var &std::unordered_map<std::string,Var,std::hash<_Kty>,std::equal_to<_Kty>,std::allocator<std::pair<const _Kty,_Ty>>>::operator [](const std::basic_string<char,std::char_traits<char>,std::allocator<char>> &)'
          with
          [
              _Kty=std::string,
              _Ty=Var
          ]
  c:\users\ron\source\repos\mitkadem3\mitkadem3\symboltable.cpp(10): note: see reference to function template instantiation 'Var &std::unordered_map<std::string,Var,std::hash<_Kty>,std::equal_to<_Kty>,std::allocator<std::pair<const _Kty,_Ty>>>::operator [](const std::basic_string<char,std::char_traits<char>,std::allocator<char>> &)' being compiled
          with
          [
              _Kty=std::string,
              _Ty=Var
          ]
  c:\users\ron\source\repos\mitkadem3\mitkadem3\symboltable.h(8): note: see reference to class template instantiation 'std::unordered_map<std::string,Var,std::hash<_Kty>,std::equal_to<_Kty>,std::allocator<std::pair<const _Kty,_Ty>>>' being compiled
          with
          [
              _Kty=std::string,
              _Ty=Var
          ]
  Generating Code...
